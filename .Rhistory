data$Distancia_da_Primeira_Aparicao_em_capitulos <- NULL
set.seed(123)  # Define uma semente aleatória para reprodução
index_train <- sample(1:nrow(data), 4000)
data_train <- data[index_train, ]
data_test <- data[-index_train, ]
model1 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Grupo + Primeiro_Capitulo
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga,
data = data_train, family = binomial)
summary(model1)
model2 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga,
data = data_train, family = binomial)
summary(model2)
model3 <- glmer(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga
+ (1|Protagonista), data = data_train, family = binomial)
summary(model3)
model4 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga
+ Protagonista + Protagonista * Porcentagem_de_Capitulos_do_Volume,
data = data_train, family = binomial)
summary(model4)
#Matriz de confusão modelo 1
pred <- predict(model1, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
#Matriz de confusão modelo 1
pred <- predict(model1, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
#Matriz de confusão modelo 2
pred <- predict(model2, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
#Matriz de confusão modelo 3
pred <- predict(model3, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
#Matriz de confusão modelo 4
pred <- predict(model4, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
#Matriz de confusão modelo 1
pred <- predict(model1, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
confusion_table_with_margins <- addmargins(confusion_table)
pred <- predict(model1, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
confusion_table_with_margins <- addmargins(table)
#Matriz de confusão modelo 1
pred <- predict(model1, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table <- table(data_test$Esta_na_Capa, pred)
confusion_table_with_margins <- addmargins(table)
# Adicione um título ao eixo y
rownames(confusion_table_with_margins)[1] <- "Real"
# Exiba a tabela com o título no eixo y
confusion_table_with_margins
pred <- predict(model1, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table <- table(data_test$Esta_na_Capa, pred)
dimnames(table)[[1]][1] <- "Real"
table
pred <- predict(model1, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table <- table(data_test$Esta_na_Capa, pred)
confusion_table_with_title <- cbind("Real" = rownames(table), table)
confusion_table_with_title
#Matriz de confusão modelo 1
pred <- predict(model1, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table <- table(data_test$Esta_na_Capa, pred)
#Matriz de confusão modelo 1
pred <- predict(model1, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table <- table(data_test$Esta_na_Capa, pred)
table
pred <- predict(model1, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table <- table(data_test$Esta_na_Capa, pred)
#print "Real"+ Table um ao lado do outro
print(table)
pred <- predict(model1, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table <- table(data_test$Esta_na_Capa, pred)
#print "Real"+ Table um ao lado do outro
print("Real", table, sep = "\t")
#Matriz de confusão modelo 1
pred <- predict(model1, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table <- table(data_test$Esta_na_Capa, pred)
#print "Real"+ Table um ao lado do outro
cat("Real\t", format(table), "\n")
pred <- predict(model1, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table <- table(data_test$Esta_na_Capa, pred)
#print "Real"+ Table um ao lado do outro
cat("Real\t", table, "\n")
#Matriz de confusão modelo 1
pred <- predict(model1, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table <- table(data_test$Esta_na_Capa, pred)
table
#Matriz de confusão modelo 2
pred <- predict(model2, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
#Matriz de confusão modelo 3
pred <- predict(model3, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
#Matriz de confusão modelo 4
pred <- predict(model4, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
#Curva ROC
library(pROC)
#Curva ROC
install.packages("pROC")
library(pROC)
roc1 <- roc(data_test$Esta_na_Capa, predict(model1, newdata = data_test, type = "response"))
roc2 <- roc(data_test$Esta_na_Capa, predict(model2, newdata = data_test, type = "response"))
roc3 <- roc(data_test$Esta_na_Capa, predict(model3, newdata = data_test, type = "response"))
roc4 <- roc(data_test$Esta_na_Capa, predict(model4, newdata = data_test, type = "response"))
plot(roc1, col = "red")
plot(roc2, col = "blue", add = TRUE)
plot(roc3, col = "green", add = TRUE)
plot(roc4, col = "yellow", add = TRUE)
model5 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga
+ Protagonista,
data = data_train, family = binomial)
summary(model5)
#Matriz de confusão modelo 5
pred <- predict(model5, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
table(data_test$Protagonista)
data_test <- data_test[data_test$Protagonista == 0, ]
data_train <- data_train[data_train$Protagonista == 0, ]
model1 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Grupo + Primeiro_Capitulo
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga,
data = data_train, family = binomial)
summary(model1)
model1 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Grupo + Primeiro_Capitulo
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga,
data = data_train, family = binomial)
summary(model1)
model2 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga,
data = data_train, family = binomial)
summary(model2)
pred <- predict(model1, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table <- table(data_test$Esta_na_Capa, pred)
table
#Matriz de confusão modelo 2
pred <- predict(model2, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
library(lme4)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
#Remover colunas que não serão utilizadas
data$Distancia_da_Primeira_Aparicao_em_capitulos <- NULL
set.seed(123)  # Define uma semente aleatória para reprodução
index_train <- sample(1:nrow(data), 4000)
data_train <- data[index_train, ]
data_test <- data[-index_train, ]
model1 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Grupo + Primeiro_Capitulo
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga,
data = data_train, family = binomial)
summary(model1)
model2 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga,
data = data_train, family = binomial)
summary(model2)
model3 <- glmer(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga
+ (1|Protagonista), data = data_train, family = binomial)
summary(model3)
model4 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga
+ Protagonista + Protagonista * Porcentagem_de_Capitulos_do_Volume,
data = data_train, family = binomial)
summary(model4)
model5 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga
+ Protagonista,
data = data_train, family = binomial)
summary(model5)
#Matriz de confusão modelo 1
pred <- predict(model1, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table <- table(data_test$Esta_na_Capa, pred)
table
#Matriz de confusão modelo 2
pred <- predict(model2, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
#Matriz de confusão modelo 3
pred <- predict(model3, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
#Matriz de confusão modelo 4
pred <- predict(model4, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
#Matriz de confusão modelo 5
pred <- predict(model5, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
pred <- predict(model3, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
# Dos corretos quais sao o protagonista
table(data_test$Esta_na_Capa, pred, data_test$Protagonista)
library(lme4)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
#Remover colunas que não serão utilizadas
data$Distancia_da_Primeira_Aparicao_em_capitulos <- NULL
set.seed(123)  # Define uma semente aleatória para reprodução
index_train <- sample(1:nrow(data), 4000)
data_train <- data[index_train, ]
data_test <- data[-index_train, ]
model1 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Grupo + Primeiro_Capitulo
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga,
data = data_train, family = binomial)
summary(model1)
model2 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga,
data = data_train, family = binomial)
summary(model2)
model3 <- glmer(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga
+ (1|Protagonista), data = data_train, family = binomial)
summary(model3)
model4 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga
+ Protagonista + Protagonista * Porcentagem_de_Capitulos_do_Volume,
data = data_train, family = binomial)
summary(model4)
model5 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga
+ Protagonista,
data = data_train, family = binomial)
summary(model5)
#Matriz de confusão modelo 1
pred <- predict(model1, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table <- table(data_test$Esta_na_Capa, pred)
table
#Matriz de confusão modelo 2
pred <- predict(model2, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
#Matriz de confusão modelo 3
pred <- predict(model3, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
#Matriz de confusão modelo 4
pred <- predict(model4, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
#Matriz de confusão modelo 5
pred <- predict(model5, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
model4 <- glmer(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga
(1|Grupo), data = data_train, family = binomial)
library(lme4)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
#Remover colunas que não serão utilizadas
data$Distancia_da_Primeira_Aparicao_em_capitulos <- NULL
set.seed(123)  # Define uma semente aleatória para reprodução
index_train <- sample(1:nrow(data), 4000)
data_train <- data[index_train, ]
data_test <- data[-index_train, ]
model1 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Grupo + Primeiro_Capitulo
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga,
data = data_train, family = binomial)
summary(model1)
model2 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga,
data = data_train, family = binomial)
summary(model2)
model3 <- glmer(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga
+ (1|Protagonista), data = data_train, family = binomial)
summary(model3)
model4 <- glmer(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga
(1|Grupo), data = data_train, family = binomial)
model4 <- glmer(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga +
(1|Grupo), data = data_train, family = binomial)
summary(model4)
#Matriz de confusão modelo 4
pred <- predict(model4, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
model4 <- glmer(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga +
(1|Grupo) + (1|Protagonista), data = data_train, family = binomial)
summary(model4)
#Matriz de confusão modelo 4
pred <- predict(model4, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
model3 <- glmer(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga
+ (1|Protagonista), data = data_train, family = binomial)
model4 <- glmer(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga +
(1|Grupo), data = data_train, family = binomial)
summary(model4)
#contar protagonista
table(data_train$Protagonista)
table(data_test$Protagonista)
library(lme4)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
#Remover colunas que não serão utilizadas
data$Distancia_da_Primeira_Aparicao_em_capitulos <- NULL
set.seed(123)  # Define uma semente aleatória para reprodução
index_train <- sample(1:nrow(data), 4000)
data_train <- data[index_train, ]
data_test <- data[-index_train, ]
#contar protagonista
table(data_train$Protagonista)
table(data_test$Protagonista)
library(lme4)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
#Remover colunas que não serão utilizadas
data$Distancia_da_Primeira_Aparicao_em_capitulos <- NULL
set.seed(123)  # Define uma semente aleatória para reprodução
index_train <- sample(1:nrow(data), 4000)
data_train <- data[index_train, ]
data_test <- data[-index_train, ]
#contar protagonista
table(data_train$Protagonista)
table(data_test$Protagonista)
library(lme4)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
#Remover colunas que não serão utilizadas
data$Distancia_da_Primeira_Aparicao_em_capitulos <- NULL
set.seed(123)  # Define uma semente aleatória para reprodução
index_train <- sample(1:nrow(data), 4000)
data_train <- data[index_train, ]
data_test <- data[-index_train, ]
#contar protagonista
table(data_train$Protagonista)
table(data_test$Protagonista)
library(lme4)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
#Remover colunas que não serão utilizadas
data$Distancia_da_Primeira_Aparicao_em_capitulos <- NULL
set.seed(123)  # Define uma semente aleatória para reprodução
index_train <- sample(1:nrow(data), 4000)
data_train <- data[index_train, ]
data_test <- data[-index_train, ]
#contar protagonista
table(data_train$Protagonista)
table(data_test$Protagonista)
library(lme4)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
#Remover colunas que não serão utilizadas
data$Distancia_da_Primeira_Aparicao_em_capitulos <- NULL
set.seed(123)  # Define uma semente aleatória para reprodução
index_train <- sample(1:nrow(data), 4000)
data_train <- data[index_train, ]
data_test <- data[-index_train, ]
#contar protagonista
table(data_train$Protagonista)
table(data_test$Protagonista)
library(lme4)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
#Remover colunas que não serão utilizadas
data$Distancia_da_Primeira_Aparicao_em_capitulos <- NULL
set.seed(123)  # Define uma semente aleatória para reprodução
index_train <- sample(1:nrow(data), 4000)
data_train <- data[index_train, ]
data_test <- data[-index_train, ]
#contar protagonista
table(data_train$Protagonista)
table(data_test$Protagonista)
library(lme4)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
#Remover colunas que não serão utilizadas
data$Distancia_da_Primeira_Aparicao_em_capitulos <- NULL
set.seed(12)  # Define uma semente aleatória para reprodução
index_train <- sample(1:nrow(data), 4000)
data_train <- data[index_train, ]
data_test <- data[-index_train, ]
#contar protagonista
table(data_train$Protagonista)
table(data_test$Protagonista)
library(lme4)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
#Remover colunas que não serão utilizadas
data$Distancia_da_Primeira_Aparicao_em_capitulos <- NULL
set.seed(1)  # Define uma semente aleatória para reprodução
index_train <- sample(1:nrow(data), 4000)
data_train <- data[index_train, ]
data_test <- data[-index_train, ]
#contar protagonista
table(data_train$Protagonista)
table(data_test$Protagonista)
library(lme4)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
#Remover colunas que não serão utilizadas
data$Distancia_da_Primeira_Aparicao_em_capitulos <- NULL
set.seed(123)  # Define uma semente aleatória para reprodução
index_train <- sample(1:nrow(data), 4000)
data_train <- data[index_train, ]
data_test <- data[-index_train, ]
#contar protagonista
table(data_train$Protagonista)
table(data_test$Protagonista)
#contar protagonista na capa
table(data_train$Esta_na_Capa, data_train$Protagonista)
table(data_test$Esta_na_Capa, data_test$Protagonista)
model4 <- glmer(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga +
(1|Grupo), data = data_train, family = binomial)
summary(model4)
#Matriz de confusão modelo 4
pred <- predict(model4, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
model5 <- glmer(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga +
Distancia_da_Primeira_Aparicao_em_volumes + (1|Grupo), data = data_train, family = binomial)
summary(model5)
pred <- predict(model5, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
model5 <- glmer(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ E_a_Primeira_Aparicao_no_manga +
Distancia_da_Primeira_Aparicao_em_volumes + (1|Grupo), data = data_train, family = binomial)
summary(model5)
#Matriz de confusão modelo 5
pred <- predict(model5, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
model5 <- glmer(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga +
Distancia_da_Primeira_Aparicao_em_volumes + (1|Grupo), data = data_train, family = binomial)
summary(model5)
#Matriz de confusão modelo 5
pred <- predict(model5, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
model5 <- glmer(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga +
Distancia_da_Primeira_Aparicao_em_volumes, data = data_train, family = binomial)
model5 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga +
Distancia_da_Primeira_Aparicao_em_volumes, data = data_train, family = binomial)
summary(model5)
#Matriz de confusão modelo 5
pred <- predict(model5, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
model6 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga +
Distancia_da_Primeira_Aparicao_em_volumes +
Numero_de_capitulos_ate_o_volume, data = data_train, family = binomial)
summary(model6)
pred <- predict(model6, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
model7 <- glmer(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga +
Distancia_da_Primeira_Aparicao_em_volume +
(1|Protagonista), data = data_train, family = binomial)
model7 <- glmer(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga +
Distancia_da_Primeira_Aparicao_em_volumes +
(1|Protagonista), data = data_train, family = binomial)
summary(model7)
pred <- predict(model7, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
model7 <- glmer(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume
+ Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga +
Distancia_da_Primeira_Aparicao_em_volumes +
(1|Grupo), data = data_train, family = binomial)
summary(model7)
#Matriz de confusão modelo 7
pred <- predict(model7, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
