summary(model)
summary(model)
data <- read.csv("data/personagens.csv", header = TRUE)
model <- glm(Esta_na_capa, data = data, family = binomial)
data <- read.csv("data/personagens.csv", header = TRUE)
model <- glm(Esta_na_Capa, data = data, family = binomial)
data <- read.csv("data/personagens.csv", header = TRUE)
model <- glm(Esta_na_Capa, data = data, family = binomial)
data <- read.csv("data/personagens.csv", header = TRUE)
model <- glm(Esta_na_Capa, data = data, family = binomial)
data <- read.csv("data/personagens.csv", header = TRUE)
model <- glm(Esta_na_Capa, data = data, family = binomial)
data <- read.csv("data/personagens.csv", header = TRUE)
model <- glm(Esta_na_Capa, data = data, family = binomial)
data <- read.csv("data/personagens.csv", header = TRUE)
model <- glm(Esta_na_Capa ~., data = data, family = binomial)
data <- read.csv("data/personagens.csv", header = TRUE)
model <- glm(Esta_na_Capa ~ ., data = data, family = binomial)
data <- read.csv("data/personagens.csv", header = TRUE)
summary(data)
data <- read.csv("data/personagens.csv", header = TRUE)
summary(data)
data$Numero_de_capitulos_ate_o_volume <- NULL
model <- glm(Esta_na_Capa ~ ., data = data, family = binomial)
data <- read.csv("data/personagens.csv", header = TRUE)
summary(data)
data$Numero_de_capitulos_ate_o_volume <- NULL
data$Distancia_da_Primeira_Aparicao_em_capitulo <- NULL
model <- glm(Esta_na_Capa ~ Grupo + Porcentagem_de_Capitulos_do_Volume, data = data, family = binomial)
summary(model)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
data$Numero_de_capitulos_ate_o_volume <- NULL
data$Distancia_da_Primeira_Aparicao_em_capitulo <- NULL
model <- glm(Esta_na_Capa ~ Grupo + Porcentagem_de_Capitulos_do_Volume, data = data, family = binomial)
summary(model)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
data$Numero_de_capitulos_ate_o_volume <- NULL
data$Distancia_da_Primeira_Aparicao_em_capitulo <- NULL
model <- glm(Esta_na_Capa ~ Grupo + Porcentagem_de_Capitulos_do_Volume + Subgrupo, data = data, family = binomial)
summary(model)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
data$Numero_de_capitulos_ate_o_volume <- NULL
data$Distancia_da_Primeira_Aparicao_em_capitulo <- NULL
model <- glm(Esta_na_Capa ~ Grupo + Porcentagem_de_Capitulos_do_Volume, data = data, family = binomial)
summary(model)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
data$Numero_de_capitulos_ate_o_volume <- NULL
data$Distancia_da_Primeira_Aparicao_em_capitulo <- NULL
model <- glm(Esta_na_Capa ~ Grupo + Porcentagem_de_Capitulos_do_Volume, data = data, family = binomial)
summary(model)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
data$Numero_de_capitulos_ate_o_volume <- NULL
data$Distancia_da_Primeira_Aparicao_em_capitulo <- NULL
model1 <- glm(Esta_na_Capa ~ Grupo + Porcentagem_de_Capitulos_do_Volume, data = data, family = binomial)
summary(model1)
model2 <- glm(Esta_na_Capa ~ Grupo + Porcentagem_de_Capitulos_do_Volume + Primeiro_Capitulo + Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga, data = data, family = binomial)
summary(model2)
# Matriz de confusão
pred <- predict(model2, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data$Esta_na_Capa, pred)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
data_train <- data[1:5000,]
data_test <- data[5001:-1,]
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
data_train <- data[1:4000,]
data_test <- data[4001:5336,]
data$Numero_de_capitulos_ate_o_volume <- NULL
data$Distancia_da_Primeira_Aparicao_em_capitulo <- NULL
model1 <- glm(Esta_na_Capa ~ Grupo + Porcentagem_de_Capitulos_do_Volume, data = data_train, family = binomial)
summary(model1)
model2 <- glm(Esta_na_Capa ~ Grupo + Porcentagem_de_Capitulos_do_Volume + Primeiro_Capitulo + Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga, data = data_train, family = binomial)
summary(model2)
# Matriz de confusão
pred <- predict(model2, data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
confusionMatrix(data_test$Esta_na_Capa, pred)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
data_train <- data[1:4000,]
data_test <- data[4001:5336,]
data$Numero_de_capitulos_ate_o_volume <- NULL
data$Distancia_da_Primeira_Aparicao_em_capitulo <- NULL
model1 <- glm(Esta_na_Capa ~ Grupo + Porcentagem_de_Capitulos_do_Volume, data = data_train, family = binomial)
summary(model1)
model2 <- glm(Esta_na_Capa ~ Grupo + Porcentagem_de_Capitulos_do_Volume + Primeiro_Capitulo + Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga, data = data_train, family = binomial)
summary(model2)
# Matriz de confusão
pred <- predict(model2, data = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data$Esta_na_Capa, pred)
# Matriz de confusão
pred <- predict(model2, data = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
data_train <- data[1:4000,]
data_test <- data[4001:5336,]
data$Numero_de_capitulos_ate_o_volume <- NULL
data$Distancia_da_Primeira_Aparicao_em_capitulo <- NULL
model1 <- glm(Esta_na_Capa ~ Grupo + Porcentagem_de_Capitulos_do_Volume, data = data_train, family = binomial)
summary(model1)
model2 <- glm(Esta_na_Capa ~ Grupo + Porcentagem_de_Capitulos_do_Volume + Primeiro_Capitulo + Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga, data = data_train, family = binomial)
summary(model2)
# Matriz de confusão
pred <- predict(model2, data = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
data_train <- data[1:4000,]
data_test <- data[4001:5336,]
data$Numero_de_capitulos_ate_o_volume <- NULL
data$Distancia_da_Primeira_Aparicao_em_capitulo <- NULL
model1 <- glm(Esta_na_Capa ~ Grupo + Porcentagem_de_Capitulos_do_Volume, data = data_train, family = binomial)
summary(model1)
model2 <- glm(Esta_na_Capa ~ Grupo + Porcentagem_de_Capitulos_do_Volume + Primeiro_Capitulo + Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga, data = data_train, family = binomial)
summary(model2)
# Matriz de confusão
pred <- predict(model2, data = data_test, type = "response")
table(data_test$Esta_na_Capa, pred)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
set.seed(123)  # Define uma semente aleatória para reprodução
index_train <- sample(1:nrow(data), 4000)
data_train <- data[index_train, ]
data_test <- data[-index_train, ]
data$Numero_de_capitulos_ate_o_volume <- NULL
data$Distancia_da_Primeira_Aparicao_em_capitulo <- NULL
model1 <- glm(Esta_na_Capa ~ Grupo + Porcentagem_de_Capitulos_do_Volume, data = data_train, family = binomial)
summary(model1)
model2 <- glm(Esta_na_Capa ~ Grupo + Porcentagem_de_Capitulos_do_Volume + Primeiro_Capitulo + Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga, data = data_train, family = binomial)
summary(model2)
# Matriz de confusão
pred <- predict(model2, data = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
# Matriz de confusão
pred <- predict(model2, data = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
# Tamanho da resposta
length(pred)
# Tamanho da resposta esperada
length(data_test$Esta_na_Capa)
table(data_test$Esta_na_Capa, pred)
length(data_train$Esta_na_Capa)
length(data_test$Esta_na_Capa)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
set.seed(123)  # Define uma semente aleatória para reprodução
index_train <- sample(1:nrow(data), 4000)
data_train <- data[index_train, ]
data_test <- data[-index_train, ]
data$Numero_de_capitulos_ate_o_volume <- NULL
data$Distancia_da_Primeira_Aparicao_em_capitulo <- NULL
model1 <- glm(Esta_na_Capa ~ Grupo + Porcentagem_de_Capitulos_do_Volume, data = data_train, family = binomial)
summary(model1)
model2 <- glm(Esta_na_Capa ~ Grupo + Porcentagem_de_Capitulos_do_Volume + Primeiro_Capitulo + Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga, data = data_train, family = binomial)
summary(model2)
# Matriz de confusão
pred <- predict(model2, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
# Tamanho da resposta
length(pred)
# Tamanho da resposta esperada
length(data_test$Esta_na_Capa)
table(data_test$Esta_na_Capa, pred)
# Matriz de confusão treino
pred <- predict(model1, newdata = data_train, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_train$Esta_na_Capa, pred)
model1 <- glm(Esta_na_Capa ~ Grupo, family = binomial)
model1 <- glm(Esta_na_Capa ~ Grupo, data = data_train, family = binomial)
summary(model1)
# Matriz de confusão treino
pred <- predict(model1, newdata = data_train, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_train$Esta_na_Capa, pred)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
set.seed(123)  # Define uma semente aleatória para reprodução
index_train <- sample(1:nrow(data), 4000)
data_train <- data[index_train, ]
data_test <- data[-index_train, ]
data$Numero_de_capitulos_ate_o_volume <- NULL
data$Distancia_da_Primeira_Aparicao_em_capitulo <- NULL
model1 <- glm(Esta_na_Capa ~ Grupo, data = data_train, family = binomial)
summary(model1)
# Matriz de confusão treino
pred <- predict(model1, newdata = data_train, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_train$Esta_na_Capa, pred)
model1 <- glm(Esta_na_Capa ~ Grupo + Porcentagem_de_Capitulos_do_Volume, data = data_train, family = binomial)
summary(model1)
# Matriz de confusão treino
pred <- predict(model1, newdata = data_train, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_train$Esta_na_Capa, pred)
model1 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume, data = data_train, family = binomial)
summary(model1)
# Matriz de confusão treino
pred <- predict(model1, newdata = data_train, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_train$Esta_na_Capa, pred)
model1 <- glm(Esta_na_Capa ~ Grupo, data = data_train, family = binomial)
summary(model1)
# Matriz de confusão treino
pred <- predict(model1, newdata = data_train, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_train$Esta_na_Capa, pred)
model1 <- glm(Esta_na_Capa ~ Grupo + Ultimo_Capitulo, data = data_train, family = binomial)
summary(model1)
# Matriz de confusão treino
pred <- predict(model1, newdata = data_train, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_train$Esta_na_Capa, pred)
model1 <- glm(Esta_na_Capa ~ Grupo + Ultimo_Capitulo, data = data_train, family = binomial)
summary(model1)
# Matriz de confusão treino
pred <- predict(model1, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_train$Esta_na_Capa, pred)
model1 <- glm(Esta_na_Capa ~ Grupo + Ultimo_Capitulo, data = data_train, family = binomial)
summary(model1)
# Matriz de confusão treino
pred <- predict(model1, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
model1 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume, data = data_train, family = binomial)
summary(model1)
# Matriz de confusão treino
pred <- predict(model1, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
set.seed(123)  # Define uma semente aleatória para reprodução
index_train <- sample(1:nrow(data), 4000)
data_train <- data[index_train, ]
data_test <- data[-index_train, ]
data$Numero_de_capitulos_ate_o_volume <- NULL
data$Distancia_da_Primeira_Aparicao_em_capitulo <- NULL
model1 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume, data = data_train, family = binomial)
summary(model1)
# Matriz de confusão treino
pred <- predict(model1, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
model2 <- glm(Esta_na_Capa ~ Grupo + Porcentagem_de_Capitulos_do_Volume + Primeiro_Capitulo + Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga, data = data_train, family = binomial)
summary(model2)
# Matriz de confusão
pred <- predict(model2, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
# Tamanho da resposta
length(pred)
# Tamanho da resposta esperada
length(data_test$Esta_na_Capa)
table(data_test$Esta_na_Capa, pred)
modelIntercept <- glm(Esta_na_Capa ~ 1, data = data_train, family = binomial)
summary(modelIntercept)
# Matriz de confusão treino
pred <- predict(modelIntercept, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
odel3 <- glm(Esta_na_Capa ~ Grupo + Primeiro_Capitulo + Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga + E_o_Primeiro_Capitulo_do_Autor, data = data_train, family = binomial)
model3 <- glm(Esta_na_Capa ~ Grupo + Primeiro_Capitulo + Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga, data = data_train, family = binomial)
summary(model3)
# Matriz de confusão
pred <- predict(model3, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
set.seed(123)  # Define uma semente aleatória para reprodução
index_train <- sample(1:nrow(data), 4000)
data_train <- data[index_train, ]
data_test <- data[-index_train, ]
data$Numero_de_capitulos_ate_o_volume <- NULL
data$Distancia_da_Primeira_Aparicao_em_capitulo <- NULL
modelIntercept <- glm(Esta_na_Capa ~ 1, data = data_train, family = binomial)
summary(modelIntercept)
# Matriz de confusão treino
pred <- predict(modelIntercept, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
model1 <- glm(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume, data = data_train, family = binomial)
summary(model1)
# Matriz de confusão treino
pred <- predict(model1, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
model2 <- glm(Esta_na_Capa ~ Grupo + Porcentagem_de_Capitulos_do_Volume + Primeiro_Capitulo + Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga, data = data_train, family = binomial)
summary(model2)
# Matriz de confusão
pred <- predict(model2, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
# Tamanho da resposta
length(pred)
# Tamanho da resposta esperada
length(data_test$Esta_na_Capa)
table(data_test$Esta_na_Capa, pred)
model3 <- glm(Esta_na_Capa ~ Grupo + Primeiro_Capitulo + Ultimo_Capitulo + E_a_Primeira_Aparicao_no_manga, data = data_train, family = binomial)
summary(model3)
# Matriz de confusão
pred <- predict(model3, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
clean
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
set.seed(123)  # Define uma semente aleatória para reprodução
index_train <- sample(1:nrow(data), 4000)
data_train <- data[index_train, ]
data_test <- data[-index_train, ]
modelIntercept <- glm(Esta_na_Capa ~ 1, data = data_train, family = binomial)
summary(modelIntercept)
# Matriz de confusão treino
pred <- predict(modelIntercept, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
data <- read.csv("data/personagens_mod.csv", header = TRUE)
summary(data)
set.seed(123)  # Define uma semente aleatória para reprodução
index_train <- sample(1:nrow(data), 4000)
data_train <- data[index_train, ]
data_test <- data[-index_train, ]
modelIntercept <- glm(Esta_na_Capa ~ 1, data = data_train, family = binomial)
summary(modelIntercept)
# Matriz de confusão teste
pred <- predict(modelIntercept, newdata = data_test, type = "response")
pred <- ifelse(pred > 0.5, 1, 0)
table(data_test$Esta_na_Capa, pred)
model4 <- glmer(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume + (1|Grupo), data = data_train, family = binomial)
install.packages("lme4")
library(lme4)
install.packages("lme4")
library(lme4)
model4 <- glmer(Esta_na_Capa ~ Porcentagem_de_Capitulos_do_Volume + (1|Grupo), data = data_train, family = binomial)
install.packages("lme4")
lybrary(lme4)
library(lme4)
library(lme4)
library(lme4)
library(lme4)
install.packages("nloptr")
library(lme4)
library(lme4)
library(lme4)
library(lme4)
library(lme4)
